// $color-white: #fff;
// $color-black: #000;
// $color-primary-light: red;
// $color-primary-dark: crimson;
// $color-secondary-light: skyblue;
// $color-secondary-dark: blue;
// $color-tertiary-light: green;
// $color-tertiary-dark: yellowgreen;
// $color-grey-light-1: grey;
// $color-grey-light-2: grey;

// VARS

//COLORS
//Greens

$color-primary-light: #2998ff;
$color-primary: #406efd;
$color-primary-dark: #5643fa;

$color-secondary-light: #ffb900;
$color-secondary-dark: #ff7730;

$color-tertiary-light: #7ed56f;
$color-tertiary: #55c57a;
$color-tertiary-dark: #28b485;

$color-quaternary-light: #ff0000;
$color-quaternary-dark: #bf0000;

//Tones
$color-grey-light-1: #f7f7f7;
$color-grey-light-2: #eee;
$color-grey-dark: #777;
$color-grey-dark-2: #999;
$color-grey-dark-3: #292929;
$color-white: #fff;
$color-black: #000;

//TYPOGRAPHY
$default-font-size: 1.6rem;

// GRID
$grid-width: 114rem;
$gutter-vertical: 8rem;
$gutter-vertical-small: 6rem;
$gutter-horizontal: 6rem;

@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      // 600px
      @content;
    }
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      // 900px
      @content;
    }
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      // 1200px
      @content;
    }
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      // 1800px
      @content;
    }
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin center-horizontally-and-vertically {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.card {
  // FUNCTIONALITY
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 20rem;
  text-align: center;
  display: table-row;

  &__side {
    height: 20rem;
    transition: all 2s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    border-radius: 3px;
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &--front {
      &-1 {
        background-color: $color-white;
      }
    }

    &--back {
      transform: rotateY(180deg);

      &-1 {
        background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        );
      }
      &-2 {
        background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        );
      }
      &-3 {
        background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        );
      }
    }
  }
  &:hover &__side--front {
    transform: rotateY(-180deg);
  }
  &:hover &__side--back {
    transform: rotateY(0deg);
  }

  // FRONT-SIDE STYLING
  &__picture {
    background-size: cover;
    height: 5rem;
    background-blend-mode: color;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    &--1 {
      background-image: linear-gradient(
          to right bottom,
          $color-tertiary-light,
          $color-tertiary-dark
        ),
        url("../../Images/Clock.jpeg");
    }
    &--2 {
      background-image: linear-gradient(
          to right bottom,
          $color-primary-light,
          $color-primary-dark
        ),
        url("../../Images/Drums.jpeg");
    }
    &--3 {
      background-image: linear-gradient(
          to right bottom,
          $color-secondary-light,
          $color-secondary-dark
        ),
        url("../../Images/London.jpeg");
    }
  }
  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: $color-white;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 65%;
  }

  &__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
    &--1 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-tertiary-light, 0.8),
        rgba($color-tertiary-dark, 0.8)
      );
    }
    &--2 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)
      );
    }
    &--3 {
      background-image: linear-gradient(
        to right bottom,
        rgba($color-secondary-light, 0.8),
        rgba($color-secondary-dark, 0.8)
      );
    }
  }

  &__details {
    padding: 3rem;
    ul {
      list-style: none;
      width: 80%;
      margin: 0 auto;

      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

        &:not(:last-child) {
          border-bottom: 1px solid $color-grey-light-2;
        }
      }
    }
  }

  // BACK SIDE STYLING
  &__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
  }

  &__price-box {
    color: $color-white;
    margin-bottom: 8rem;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }
  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }
  &__price-adjunct {
    font-size: 2rem;
  }

  /////////////////////////////////////////////////////////
  //////////////MEDIA QUERY/////////////////
  ////////////////////////////////////////////////////////

  // if screen is under 900px or where hover is not available, i.e. landscape tablets, apply this query.
  @media only screen and (max-width: 56.25em), only screen and (hover: none) {
    height: auto;

    background-color: $color-white;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &__side {
      height: auto;
      position: relative;
      box-shadow: none;

      &--back {
        transform: rotateY(0);
        clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%);
      }
    }
    &:hover &__side--front {
      transform: rotateY(0);
    }
    &:hover &__side--back {
      transform: rotateY(0);
    }

    &__details {
      padding: 1rem 3rem;
    }

    // BACK SIDE STYLING
    &__cta {
      position: relative;
      top: 0;
      left: 0;
      transform: translate(0);
      width: 100%;
      padding: 7rem 4rem 4rem 4rem;
    }

    &__price-box {
      margin-bottom: 3rem;
    }

    &__price-value {
      font-size: 6rem;
    }
  }
}

//GRID

.row {
  max-width: $grid-width;
  margin: 0 auto;
  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;
  }

  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-botton: $gutter-vertical-small;
    }
  }

  // apply the following style if element is not the last child of row.

  @include clearfix;

  // we can use the attribute selector to act like a regexp selector for class names, here we're going to select classes than begin with "col-"
  // ^= starts with
  // *= contains
  // $= ends with
  [class^="col-"] {
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }

    // at max-width: 900px breakpoint,
    // all columns should have a width of 100%
    // use !important to ensure these widths are overwritten

    // then remove horizontal gutter as not needed anymore

    // then create a new variable called $gutter-vertical-small
    @include respond(tab-port) {
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - (#{$gutter-horizontal} * 2)) / 3);
  }

  .col-2-of-3 {
    width: calc(
      ((100% - (#{$gutter-horizontal} * 2)) / 3) * 2 + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - (#{$gutter-horizontal} * 3)) / 4);
  }

  .col-2-of-4 {
    width: calc(
      ((100% - (#{$gutter-horizontal} * 3)) / 4) * 2 + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      ((100% - (#{$gutter-horizontal} * 3)) / 4) * 3 + #{$gutter-horizontal * 2}
    );
  }
}
